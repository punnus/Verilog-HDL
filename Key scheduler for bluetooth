module key_schedule_bl (
      inpt_key,
      kout,
      clk,
      rst,
      rst_rdy1,
      Addr,
      rdy1,
      rdy2);
  
  //Input ports//
  input [127:0] inpt_key; //Input to the key scheduler//
  input clk; //Clock//
  input rst; // reset pin//
  input [4:0] Addr; //For addressing internal memory//
  input rst_rdy1; //To diable key scheduler//
  //Output//
  output [127:0] kout;
  output rdy1,rdy2;
   
  
  //Registers//
  reg [7:0] inpt_buf[0:16];
  reg [127:0] kout;
  reg rdy1; //To give signal that all sub keys are ready to the encrpytion block//
  reg rdy2; //To give signal that all sub keys are ready to the decryption block//
  reg [127:0] K[0:17]; // internal memory//
  reg [4:0] state; //FSM states//
  reg [4:0] Ksel; //To select the required K sequence//
  reg carry; //Carry of the full adder//
  reg[7:0] sum; //Accumulator//
  reg [1:0] cycle; //For cyclic rotation//
  
  //Wires//
  wire [7:0]w2;
  wire w1;
      
  
  always@(posedge clk)
    begin
      if(rst)
        begin
          {K[16],K[15],K[14],K[13],K[12],K[11],K[10],K[9],K[8],K[7],K[6],K[5],K[4],K[3],K[2],K[1],K[0]} <=0;
          kout<=0;
          {inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0]} <= 0;
          state<=0;
          carry<=0;
          sum<=0;
          Ksel<=0;
          cycle<=0;
          rdy1<=0;
        end
    else
          case(state)
                0: begin
                    {inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0]}<= inpt_key;
                    state<=1;
                    Ksel<=0;
                  end
                1: begin
                    inpt_buf[16]<=inpt_buf[15]+inpt_buf[14]+inpt_buf[13]+inpt_buf[12]+inpt_buf[11]+inpt_buf[10]+inpt_buf[9]+inpt_buf[8]+inpt_buf[7]+inpt_buf[6]+inpt_buf[5]+inpt_buf[4]+inpt_buf[3]+inpt_buf[2]+inpt_buf[1]+inpt_buf[0];
                    state<=2;
                  end
                2: begin
                    inpt_buf[16]<=inpt_buf[16]>>1;
                    state<=4;
                end
                3: begin
                    if(cycle==2)
                      begin
                        state<=4;
                        cycle<=0;
                    end
                  else
                    begin
                    inpt_buf[0]<={inpt_buf[0][0],inpt_buf[0][7:1]};
                    inpt_buf[1]<={inpt_buf[1][0],inpt_buf[1][7:1]};
                    inpt_buf[2]<={inpt_buf[2][0],inpt_buf[2][7:1]};
                    inpt_buf[3]<={inpt_buf[3][0],inpt_buf[3][7:1]};
                    inpt_buf[4]<={inpt_buf[4][0],inpt_buf[4][7:1]};
                    inpt_buf[5]<={inpt_buf[5][0],inpt_buf[5][7:1]};
                    inpt_buf[6]<={inpt_buf[6][0],inpt_buf[6][7:1]};
                    inpt_buf[7]<={inpt_buf[7][0],inpt_buf[7][7:1]};
                    inpt_buf[8]<={inpt_buf[8][0],inpt_buf[8][7:1]};
                    inpt_buf[9]<={inpt_buf[9][0],inpt_buf[9][7:1]};
                    inpt_buf[10]<={inpt_buf[10][0],inpt_buf[10][7:1]};
                    inpt_buf[11]<={inpt_buf[11][0],inpt_buf[11][7:1]};
                    inpt_buf[12]<={inpt_buf[12][0],inpt_buf[12][7:1]};
                    inpt_buf[13]<={inpt_buf[13][0],inpt_buf[13][7:1]};
                    inpt_buf[14]<={inpt_buf[14][0],inpt_buf[14][7:1]};
                    inpt_buf[15]<={inpt_buf[15][0],inpt_buf[15][7:1]};
                    inpt_buf[16]<={inpt_buf[16][0],inpt_buf[16][7:1]};
                    state<=3;
                    cycle<=cycle+1;
                  end
                end
                4: begin
                    case(Ksel)
                      0: begin
                          K[1]<={inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0]};
                          state<=3;
                          Ksel<=1;
                        end
                      1: begin
                          K[2]<={inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1]};
                          state<=3;
                          Ksel<=2;
                        end
                      2: begin
                          K[3]<={inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2]};
                          state<=3;
                          Ksel<=3;
                        end
                      3: begin
                          K[4]<={inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3]};
                          state<=3;
                          Ksel<=4;
                        end
                      4: begin
                          K[5]<={inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4]};
                          state<=3;
                          Ksel<=5;
                        end
                      5: begin
                          K[6]<={inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5]};
                          state<=3;
                          Ksel<=6;
                        end
                      6: begin
                          K[7]<={inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6]};
                          state<=3;
                          Ksel<=7;
                        end
                      7: begin
                          K[8]<={inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7]};
                          state<=3;
                          Ksel<=8;
                        end
                      8: begin
                          K[9]<={inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8]};
                          state<=3;
                          Ksel<=9;
                        end
                      9: begin
                          K[10]<={inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9]};
                          state<=3;
                          Ksel<=10;
                        end
                      10: begin
                          K[11]<={inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10]};
                          state<=3;
                          Ksel<=11;
                        end
                      11: begin
                          K[12]<={inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11]};
                          state<=3;
                          Ksel<=12;
                        end
                      12: begin
                          K[13]<={inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13],inpt_buf[12]};
                          state<=3;
                          Ksel<=13;
                        end
                      13: begin
                          K[14]<={inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14],inpt_buf[13]};
                          state<=3;
                          Ksel<=14;
                        end
                      14: begin
                          K[15]<={inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15],inpt_buf[14]};
                          state<=3;
                          Ksel<=15;
                        end
                      15: begin
                          K[16]<={inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16],inpt_buf[15]};
                          state<=3;
                          Ksel<=16;
                        end
                      16: begin
                          K[17]<={inpt_buf[14],inpt_buf[13],inpt_buf[12],inpt_buf[11],inpt_buf[10],inpt_buf[9],inpt_buf[8],inpt_buf[7],inpt_buf[6],inpt_buf[5],inpt_buf[4],inpt_buf[3],inpt_buf[2],inpt_buf[1],inpt_buf[0],inpt_buf[16]};
                          state<=5;
                          Ksel<=17;
                          rdy1<=1;
                          rdy2<=1;
                        end
                    endcase
                  end
            default:  begin
                        if(rdy1)
                          begin
                          state<=5;
                          end
                        if(rst_rdy1)
                          begin
                          state<=5;
                          Ksel<=0;
                          rdy1<=0;
                          end
                        else
                          begin
                            state<=0;
                            Ksel<=0;
                          end
                        end
                  endcase 
                end           
        
        always@(posedge clk)
          begin
              if(rdy1)
                begin
                  case(Addr)
                    0: kout<=K[0];
                    1: kout<=K[1];
                    2: kout<=K[2];
                    3: kout<=K[3];
                    4: kout<=K[4];
                    5: kout<=K[5];
                    6: kout<=K[6];
                    7: kout<=K[7];
                    8: kout<=K[8];
                    9: kout<=K[9];
                    10: kout<=K[10];
                    11: kout<=K[11];
                    12: kout<=K[12];
                    13: kout<=K[13];
                    14: kout<=K[14];
                    15: kout<=K[15];
                    16: kout<=K[16];
                    17: kout<=K[17];
                    default: kout<=128'h000000000000000000000000000000EE;
                  endcase
                end
          end        
endmodule
